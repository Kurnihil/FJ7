; ..\CORE\CORE_HSPI.SRC generated from: ..\CORE\CORE_HSPI.C
; COMPILER INVOKED BY:
;        C:\Keil\C51\BIN\C51.EXE ..\CORE\CORE_HSPI.C LARGE OMF2 WARNINGLEVEL(1) OPTIMIZE(9,SIZE) ORDER INCDIR(..\CORE\INCLUDE\;..\OEM\V13\INCLUDE\) DEBUG CODE PRINT(..\KeilMisc\Lst\CORE_HSPI.lst) PAGEWIDTH(79) PAGELENGTH(66) OBJECT(..\KeilMisc\Obj\CORE_HSPI.obj)

$NOMOD51

NAME	CORE_HSPI

P0	DATA	080H
P1	DATA	090H
P2	DATA	0A0H
P3	DATA	0B0H
PSW	DATA	0D0H
ACC	DATA	0E0H
B	DATA	0F0H
SP	DATA	081H
DPL	DATA	082H
DPH	DATA	083H
PCON	DATA	087H
TCON	DATA	088H
TMOD	DATA	089H
TL0	DATA	08AH
TL1	DATA	08BH
TH0	DATA	08CH
TH1	DATA	08DH
IE	DATA	0A8H
IP	DATA	0B8H
SCON	DATA	098H
SBUF	DATA	099H
T2CON	DATA	0C8H
T2MOD	DATA	0C9H
RCAP2L	DATA	0CAH
RCAP2H	DATA	0CBH
TL2	DATA	0CCH
TH2	DATA	0CDH
WDTCON	DATA	0D8H
MPRECF	DATA	0F7H
WDTEB	BIT	0D8H.1
WDTRST	BIT	0D8H.0
CY	BIT	0D0H.7
AC	BIT	0D0H.6
F0	BIT	0D0H.5
RS1	BIT	0D0H.4
RS0	BIT	0D0H.3
OV	BIT	0D0H.2
P	BIT	0D0H.0
TF1	BIT	088H.7
TR1	BIT	088H.6
TF0	BIT	088H.5
TR0	BIT	088H.4
IE1	BIT	088H.3
IT1	BIT	088H.2
IE0	BIT	088H.1
IT0	BIT	088H.0
EA	BIT	0A8H.7
ET2	BIT	0A8H.5
ES	BIT	0A8H.4
ET1	BIT	0A8H.3
EX1	BIT	0A8H.2
ET0	BIT	0A8H.1
EX0	BIT	0A8H.0
PS	BIT	0B8H.4
PT1	BIT	0B8H.3
PX1	BIT	0B8H.2
PT0	BIT	0B8H.1
PX0	BIT	0B8H.0
RD	BIT	0B0H.7
WR	BIT	0B0H.6
T1	BIT	0B0H.5
T0	BIT	0B0H.4
INT1	BIT	0B0H.3
INT0	BIT	0B0H.2
SM0	BIT	098H.7
SM1	BIT	098H.6
SM2	BIT	098H.5
REN	BIT	098H.4
TB8	BIT	098H.3
RB8	BIT	098H.2
TI	BIT	098H.1
RI	BIT	098H.0
TF2	BIT	0C8H.7
EXF2	BIT	0C8H.6
RCLK	BIT	0C8H.5
TCLK	BIT	0C8H.4
EXEN2	BIT	0C8H.3
TR2	BIT	0C8H.2
CT2	BIT	0C8H.1
CPRL2	BIT	0C8H.0
?PR?GPIO_HSPI_INIT?CORE_HSPI             SEGMENT CODE 
?PR?Enable_HSPI?CORE_HSPI                SEGMENT CODE 
?PR?Disable_HSPI?CORE_HSPI               SEGMENT CODE 
?PR?HSPI_RamCode?CORE_HSPI               SEGMENT CODE 
?PR?HSPI_CmdRamCode?CORE_HSPI            SEGMENT CODE 
?PR?_ChangePLLFrequency?CORE_HSPI        SEGMENT CODE 
?PR?CORE_HSPI        SEGMENT CODE 
	EXTRN	DATA (MainFucnLow)
	EXTRN	DATA (MainFucnHigh)
	EXTRN	XDATA (WinFlashMark)
	EXTRN	XDATA (RamCodePort)
	EXTRN	XDATA (RamcodeCmd)
	EXTRN	XDATA (HSPI_FPT_timeout)
	EXTRN	XDATA (FLHCTRL1R)
	EXTRN	XDATA (HCTRL2R)
	EXTRN	XDATA (R103A)
	EXTRN	XDATA (DSADR2)
	EXTRN	XDATA (HINSTC1)
	EXTRN	XDATA (ISR7)
	EXTRN	XDATA (IER7)
	EXTRN	XDATA (KBHISR)
	EXTRN	XDATA (KBHIKDOR)
	EXTRN	XDATA (KBHIDIR)
	EXTRN	XDATA (PM1STS)
	EXTRN	XDATA (PM1DO)
	EXTRN	XDATA (PM1DI)
	EXTRN	XDATA (PM2STS)
	EXTRN	XDATA (PM2DO)
	EXTRN	XDATA (PM2DI)
	EXTRN	XDATA (GPCRH0)
	EXTRN	XDATA (GPCRH3)
	EXTRN	XDATA (GPCRH4)
	EXTRN	XDATA (GPCRH5)
	EXTRN	XDATA (GPCRH6)
	EXTRN	XDATA (PLLCTRL)
	EXTRN	XDATA (PLLFREQR)
	EXTRN	XDATA (RSTC4)
	EXTRN	CODE (DisableAllInterrupt)
	EXTRN	BIT (F_Service_MS_1)
	PUBLIC	_ChangePLLFrequency
	PUBLIC	HSPI_CmdRamCode
	PUBLIC	HSPI_RamCode
	PUBLIC	Disable_HSPI
	PUBLIC	Enable_HSPI
	PUBLIC	GPIO_HSPI_INIT
; /*-----------------------------------------------------------------------------
;  * TITLE: CORE_HSPI.C
;  *
;  * Copyright (c) 2009- , ITE Corporation. All Rights Reserved.
;  *
;  * You may not reproduce, distribute, publish, display, perform, modify, adapt,
;  * transmit, broadcast, present, recite, release, license or otherwise exploit
;  * any part of this publication in any form, by any means, without the prior
;  * written permission of Insyde Software Corporation.
;  *---------------------------------------------------------------------------*/
; #pragma SRC
; 
; #include <CORE_INCLUDE.H>
; #include <OEM_INCLUDE.H>
; 
; //----------------------------------------------------------------------------
; // Disable HSPI interface pins 
; //----------------------------------------------------------------------------

	RSEG  ?PR?CORE_HSPI
Com002E:
L?0047:
	USING	0
	MOV  	DPTR,#GPCRH3
L?0048:
	MOVX 	@DPTR,A
	MOV  	DPTR,#GPCRH4
	MOVX 	@DPTR,A
	MOV  	DPTR,#GPCRH5
	MOVX 	@DPTR,A
	MOV  	DPTR,#GPCRH6
	MOVX 	@DPTR,A
	RET  	
L?0049:
	USING	0
	MOV  	DPTR,#IER7
	MOVX 	A,@DPTR
	ANL  	A,#0F7H
	MOVX 	@DPTR,A
	MOV  	DPTR,#ISR7
	MOVX 	A,@DPTR
	ORL  	A,#08H
	MOVX 	@DPTR,A
	RET  	
; END OF Com002E

; void GPIO_HSPI_INIT(void)

	RSEG  ?PR?GPIO_HSPI_INIT?CORE_HSPI
GPIO_HSPI_INIT:
	USING	0
			; SOURCE LINE # 19
; {
			; SOURCE LINE # 20
; 	GPCRH3 = INPUT;                 // Set input mode
			; SOURCE LINE # 21
	MOV  	DPTR,#GPCRH3
	MOV  	A,#080H
; 	GPCRH4 = INPUT;                 // Set input mode
			; SOURCE LINE # 22
; 	GPCRH5 = INPUT;                 // Set input mode
			; SOURCE LINE # 23
; 	GPCRH6 = INPUT;                 // Set input mode
			; SOURCE LINE # 24
	LCALL	L?0048
;     SET_MASK(RSTC4,BIT0);           // Reset SPI
			; SOURCE LINE # 25
	MOV  	DPTR,#RSTC4
	MOVX 	A,@DPTR
	ORL  	A,#01H
	MOVX 	@DPTR,A
; }
			; SOURCE LINE # 26
	RET  	
; END OF GPIO_HSPI_INIT

; 
; //----------------------------------------------------------------------------
; // Enable HSPI interface
; //----------------------------------------------------------------------------
; void Enable_HSPI(void)

	RSEG  ?PR?Enable_HSPI?CORE_HSPI
Enable_HSPI:
	USING	0
			; SOURCE LINE # 31
; {
			; SOURCE LINE # 32
;     CLEAR_MASK(IER7,BIT3);          // Disable HSPI interrupt 
			; SOURCE LINE # 33
;     SET_MASK(ISR7,BIT3);            // W/C interrupt status
			; SOURCE LINE # 34
	LCALL	L?0049
;     
; 	GPCRH3 = ALT;                   // Set HSPI mode
			; SOURCE LINE # 36
	CLR  	A
; 	GPCRH4 = ALT;                   // Set HSPI mode
			; SOURCE LINE # 37
; 	GPCRH5 = ALT;                   // Set HSPI mode
			; SOURCE LINE # 38
; 	GPCRH6 = ALT;                   // Set HSPI mode
			; SOURCE LINE # 39
	LCALL	L?0047
;     
;     HINSTC1 = (ENDPI+ENDEI);        // Host Instruction Control 1      
			; SOURCE LINE # 41
	MOV  	DPTR,#HINSTC1
	MOV  	A,#03H
	MOVX 	@DPTR,A
;     R103A = 0x10;				    // set bit4 for not SST SPI ROM
			; SOURCE LINE # 42
	MOV  	DPTR,#R103A
	MOV  	A,#010H
	MOVX 	@DPTR,A
; 								    // clear bit4 for SST SPI ROM or set bit4 for not SST SPI ROM
;                            		    // For phoenix bios 
; 	FLHCTRL1R = 0x00;			    // Flash Control Register 1
			; SOURCE LINE # 45
	CLR  	A
	MOV  	DPTR,#FLHCTRL1R
	MOVX 	@DPTR,A
; 	HCTRL2R = 0x10;				    // Host Control 2 Register
			; SOURCE LINE # 46
	MOV  	DPTR,#HCTRL2R
	MOV  	A,#010H
	MOVX 	@DPTR,A
; 
;     //SET_MASK(ISR7,BIT3);            // W/C interrupt status
;     SET_MASK(IER7,BIT3);            // Enable interrupt 
			; SOURCE LINE # 49
	MOV  	DPTR,#IER7
	MOVX 	A,@DPTR
	ORL  	A,#08H
	MOVX 	@DPTR,A
; }
			; SOURCE LINE # 50
	RET  	
; END OF Enable_HSPI

; 
; //----------------------------------------------------------------------------
; // Disable HSPI interface
; //----------------------------------------------------------------------------
; void Disable_HSPI(void)

	RSEG  ?PR?Disable_HSPI?CORE_HSPI
Disable_HSPI:
	USING	0
			; SOURCE LINE # 55
; {
			; SOURCE LINE # 56
;     CLEAR_MASK(IER7,BIT3);          // Disable HSPI interrupt 
			; SOURCE LINE # 57
;     SET_MASK(ISR7,BIT3);            // W/C interrupt status
			; SOURCE LINE # 58
	LCALL	L?0049
;     HCTRL2R = 0x80;	
			; SOURCE LINE # 59
	MOV  	DPTR,#HCTRL2R
	MOV  	A,#080H
	MOVX 	@DPTR,A
; 
; 	GPCRH3 = INPUT;                 // Set input mode
			; SOURCE LINE # 61
; 	GPCRH4 = INPUT;                 // Set input mode
			; SOURCE LINE # 62
; 	GPCRH5 = INPUT;                 // Set input mode
			; SOURCE LINE # 63
; 	GPCRH6 = INPUT;                 // Set input mode
			; SOURCE LINE # 64
	LCALL	L?0047
;     SET_MASK(RSTC4,BIT0);           // Reset SPI
			; SOURCE LINE # 65
	MOV  	DPTR,#RSTC4
	MOVX 	A,@DPTR
	ORL  	A,#01H
	MOVX 	@DPTR,A
; }
			; SOURCE LINE # 66
	RET  	
; END OF Disable_HSPI

; 
; #pragma ot(8, speed)
; //----------------------------------------------------------------------------
; // Instructino is valid
; //----------------------------------------------------------------------------
; void HSPI_RamCode(void) using 2

	RSEG  ?PR?HSPI_RamCode?CORE_HSPI
HSPI_RamCode:
	USING	2
	PUSH 	PSW
			; SOURCE LINE # 72
; {
;     HINSTC1 = DISSV+DISS+ENDPI+ENDEI;   // Allow instruction
			; SOURCE LINE # 74
	MOV  	DPTR,#HINSTC1
	MOV  	A,#0FH
	MOVX 	@DPTR,A
;     SET_MASK(ISR7,BIT3);
			; SOURCE LINE # 75
	MOV  	DPTR,#ISR7
	MOVX 	A,@DPTR
	ORL  	A,#08H
	MOVX 	@DPTR,A
;     
;     HSPI_FPT_timeout = 0x00;
			; SOURCE LINE # 77
	CLR  	A
	MOV  	DPTR,#HSPI_FPT_timeout
	MOVX 	@DPTR,A
;     TR0 = 0;                        // Disable timer 0
			; SOURCE LINE # 78
	CLR  	TR0
;     ET0 = 0;			            // Disable timer0 interrupt
			; SOURCE LINE # 79
	CLR  	ET0
;     TH0 = Timer_85ms>>8;			// set timer0 counter 85 ms 
			; SOURCE LINE # 80
	MOV  	TH0,A
;     TL0 = Timer_85ms;			    // set timer0 counter 85 ms
			; SOURCE LINE # 81
	MOV  	TL0,#01H
;     TF0 = 0;			            // clear overflow flag
			; SOURCE LINE # 82
	CLR  	TF0
;     TR0 = 1;			            // enable timer0
			; SOURCE LINE # 83
	SETB 	TR0
?C0004:
; 
;     while(!TF0)                     // if isn't time out
			; SOURCE LINE # 85
	JNB  	TF0,$ + 6H
	LJMP 	?C0005
;     {
			; SOURCE LINE # 86
;         if(IS_MASK_SET(ISR7, BIT3)) // Check HSPI isr
			; SOURCE LINE # 87
	MOV  	DPTR,#ISR7
	MOVX 	A,@DPTR
	JNB  	ACC.3,?C0004
;         {
			; SOURCE LINE # 88
;             if(DSADR2==HSPI_ECCodeSpaceAddr)    // EC code space
			; SOURCE LINE # 89
	MOV  	DPTR,#DSADR2
	MOVX 	A,@DPTR
	XRL  	A,#018H
	JNZ  	?C0007
;             {
			; SOURCE LINE # 90
;                 HINSTC1 = DISSV+DISS+ENDPI+ENDEI;   // Allow instruction
			; SOURCE LINE # 91
	MOV  	DPTR,#HINSTC1
	MOV  	A,#0FH
	MOVX 	@DPTR,A
;                 SET_MASK(ISR7,BIT3);
			; SOURCE LINE # 92
	MOV  	DPTR,#ISR7
	MOVX 	A,@DPTR
	ORL  	A,#08H
	MOVX 	@DPTR,A
;                     
;                 TH0 = Timer_85ms>>8;			// set timer1 counter 85 ms 
			; SOURCE LINE # 94
;                 TL0 = Timer_85ms;			    // set timer1 counter 85 ms
			; SOURCE LINE # 95
;                 TF0 = 0;			            // clear overflow flag
			; SOURCE LINE # 96
	SJMP 	?C0041
?C0008:
; 
;                 while(1)
			; SOURCE LINE # 98
;                 {
			; SOURCE LINE # 99
;                     if(IS_MASK_SET(ISR7, BIT3))
			; SOURCE LINE # 100
	MOV  	DPTR,#ISR7
	MOVX 	A,@DPTR
	JNB  	ACC.3,?C0010
;                     {
			; SOURCE LINE # 101
;                         HINSTC1 = DISSV+DISS+ENDPI+ENDEI;   // Allow instruction
			; SOURCE LINE # 102
	MOV  	DPTR,#HINSTC1
	MOV  	A,#0FH
	MOVX 	@DPTR,A
;                         SET_MASK(ISR7,BIT3);
			; SOURCE LINE # 103
	MOV  	DPTR,#ISR7
	MOVX 	A,@DPTR
	ORL  	A,#08H
	MOVX 	@DPTR,A
;                             
;                         TH0 = Timer_85ms>>8;  // set timer1 counter 85 ms 
			; SOURCE LINE # 105
	CLR  	A
	MOV  	TH0,A
;                         TL0 = Timer_85ms;	    // set timer1 counter 85 ms
			; SOURCE LINE # 106
	MOV  	TL0,#01H
;                         TF0 = 0; 
			; SOURCE LINE # 107
	CLR  	TF0
;                         HSPI_FPT_timeout = 0x00;
			; SOURCE LINE # 108
	MOV  	DPTR,#HSPI_FPT_timeout
	MOVX 	@DPTR,A
;                         continue;
			; SOURCE LINE # 109
	SJMP 	?C0008
;                     }
			; SOURCE LINE # 110
?C0010:
; 
;                     if(TF0)
			; SOURCE LINE # 112
	JNB  	TF0,?C0008
;                     {
			; SOURCE LINE # 113
;                         if(++HSPI_FPT_timeout>=36)      // 3 sec EC auto wake up from ram code.
			; SOURCE LINE # 114
	MOV  	DPTR,#HSPI_FPT_timeout
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
	CLR  	C
	SUBB 	A,#024H
	JC   	?C0012
;                         {
			; SOURCE LINE # 115
;                             HSPI_FPT_timeout=0xFF;
			; SOURCE LINE # 116
	MOV  	A,#0FFH
	MOVX 	@DPTR,A
;                             break;
			; SOURCE LINE # 117
	SJMP 	?C0009
;                         }
			; SOURCE LINE # 118
?C0012:
;                         TH0 = Timer_85ms>>8;			// set timer1 counter 85 ms 
			; SOURCE LINE # 119
?C0041:
	CLR  	A
	MOV  	TH0,A
;                         TL0 = Timer_85ms;			    // set timer1 counter 85 ms
			; SOURCE LINE # 120
	MOV  	TL0,#01H
;                         TF0 = 0;			            // clear overflow flag
			; SOURCE LINE # 121
	CLR  	TF0
;                     }
			; SOURCE LINE # 122
;                 }
			; SOURCE LINE # 123
	SJMP 	?C0008
?C0009:
;                 
;                 WinFlashMark = 0x33;
			; SOURCE LINE # 125
	MOV  	DPTR,#WinFlashMark
	MOV  	A,#033H
	MOVX 	@DPTR,A
;                 TR0 = 0;			    // disable timer1
			; SOURCE LINE # 126
	CLR  	TR0
;  	            TF0 = 0;			    // clear overflow flag
			; SOURCE LINE # 127
	CLR  	TF0
; 	            ET0 = 1;			    // Enable timer1 interrupt
			; SOURCE LINE # 128
	SETB 	ET0
; 	            
; 	            MainFucnLow = 0x00;     // Set main function low return vector
			; SOURCE LINE # 130
	CLR  	A
	MOV  	MainFucnLow,A
;                 MainFucnHigh= 0x02;     // Set main function high return vector
			; SOURCE LINE # 131
	MOV  	MainFucnHigh,#02H
; 	            #pragma asm
;                 CLR     PSW.3
	  CLR     PSW.3
;                 CLR     PSW.4           // IRam bank 0
	  CLR     PSW.4            
;                 PUSH    05EH            // Push main function low return vector
	  PUSH    05EH             
;                 PUSH    05FH            // Push main function high return vector       
	  PUSH    05FH             
;                 RETI                    // Return to main function 0x200 
	  RETI                     
;                 #pragma endasm
;             }
			; SOURCE LINE # 139
?C0007:
;             
;             HINSTC1 = DISSV+DISS+ENDPI+ENDEI;   // Allow instruction
			; SOURCE LINE # 141
	MOV  	DPTR,#HINSTC1
	MOV  	A,#0FH
	MOVX 	@DPTR,A
;             SET_MASK(ISR7,BIT3);
			; SOURCE LINE # 142
	MOV  	DPTR,#ISR7
	MOVX 	A,@DPTR
	ORL  	A,#08H
	MOVX 	@DPTR,A
;                 
;             TH0 = Timer_85ms>>8;  // set timer1 counter 85 ms 
			; SOURCE LINE # 144
	CLR  	A
	MOV  	TH0,A
;             TL0 = Timer_85ms;	    // set timer1 counter 85 ms
			; SOURCE LINE # 145
	MOV  	TL0,#01H
;             TF0 = 0;
			; SOURCE LINE # 146
	CLR  	TF0
;         }
			; SOURCE LINE # 147
;     }
			; SOURCE LINE # 148
	LJMP 	?C0004
?C0005:
;     
;     TR0 = 0;			    // disable timer1
			; SOURCE LINE # 150
	CLR  	TR0
;     TF0 = 0;			    // clear overflow flag
			; SOURCE LINE # 151
	CLR  	TF0
;     ET0 = 1;			    // Enable timer1 interrupt 
			; SOURCE LINE # 152
	SETB 	ET0
; 
;     TL0 = Timer_1ms;      	// Reload timer
			; SOURCE LINE # 154
	CLR  	A
	MOV  	TL0,A
; 	TH0 = Timer_1ms>>8;	    // 1ms
			; SOURCE LINE # 155
	MOV  	TH0,#0FDH
;     TR0 = 1;                // Start timer0 running
			; SOURCE LINE # 156
	SETB 	TR0
;     ET0 = 1;				// Enable timer0 interrupt
			; SOURCE LINE # 157
	SETB 	ET0
;     F_Service_MS_1 = 1;     // Request 1 mS timer service.
			; SOURCE LINE # 158
	SETB 	F_Service_MS_1
; }
			; SOURCE LINE # 159
	POP  	PSW
	RET  	
; END OF HSPI_RamCode

; 
; #pragma ot(8, speed)
; //----------------------------------------------------------------------------
; // Host send idle command to EC
; //----------------------------------------------------------------------------
; void HSPI_CmdRamCode(void)

	RSEG  ?PR?HSPI_CmdRamCode?CORE_HSPI
HSPI_CmdRamCode:
	USING	0
			; SOURCE LINE # 165
; {
			; SOURCE LINE # 166
; 	RamcodeCmd = 0x00;
			; SOURCE LINE # 167
	CLR  	A
	MOV  	DPTR,#RamcodeCmd
	MOVX 	@DPTR,A
; 
; 	if(RamCodePort==0x64)
			; SOURCE LINE # 169
	MOV  	DPTR,#RamCodePort
	MOVX 	A,@DPTR
	CJNE 	A,#064H,?C0014
; 	{
			; SOURCE LINE # 170
; 		KBHIKDOR = 0xFA;
			; SOURCE LINE # 171
	MOV  	DPTR,#KBHIKDOR
; 	}
			; SOURCE LINE # 172
	SJMP 	?C0043
?C0014:
; 	else if(RamCodePort==0x66)
			; SOURCE LINE # 173
	MOV  	DPTR,#RamCodePort
	MOVX 	A,@DPTR
	CJNE 	A,#066H,?C0016
; 	{
			; SOURCE LINE # 174
; 		PM1DO = 0xFA;
			; SOURCE LINE # 175
	MOV  	DPTR,#PM1DO
?C0042:
; 	}	
			; SOURCE LINE # 176
	SJMP 	?C0043
?C0016:
; 	else if(RamCodePort==0x6C)
			; SOURCE LINE # 177
	MOV  	DPTR,#RamCodePort
	MOVX 	A,@DPTR
	CJNE 	A,#06CH,?C0019
; 	{
			; SOURCE LINE # 178
; 		PM2DO = 0xFA;
			; SOURCE LINE # 179
	MOV  	DPTR,#PM2DO
?C0043:
	MOV  	A,#0FAH
	MOVX 	@DPTR,A
; 	}
			; SOURCE LINE # 180
?C0019:
;     
;  	while(1)
			; SOURCE LINE # 182
;   	{
			; SOURCE LINE # 183
;         if(IS_MASK_SET(ISR7, BIT3))
			; SOURCE LINE # 184
	MOV  	DPTR,#ISR7
	MOVX 	A,@DPTR
	JNB  	ACC.3,?C0021
;         {
			; SOURCE LINE # 185
;             HINSTC1 = DISSV+DISS+ENDPI+ENDEI;   // Allow instruction
			; SOURCE LINE # 186
	MOV  	DPTR,#HINSTC1
	MOV  	A,#0FH
	MOVX 	@DPTR,A
;             SET_MASK(ISR7,BIT3);
			; SOURCE LINE # 187
	MOV  	DPTR,#ISR7
	MOVX 	A,@DPTR
	ORL  	A,#08H
	MOVX 	@DPTR,A
;         }
			; SOURCE LINE # 188
?C0021:
;         
;   		if(RamCodePort==0x64)
			; SOURCE LINE # 190
	MOV  	DPTR,#RamCodePort
	MOVX 	A,@DPTR
	CJNE 	A,#064H,?C0022
; 		{
			; SOURCE LINE # 191
; 			if( IS_MASK_CLEAR(KBHISR,IBF)) continue;
			; SOURCE LINE # 192
	MOV  	DPTR,#KBHISR
	MOVX 	A,@DPTR
	JNB  	ACC.1,?C0019
?C0023:
;         	if( IS_MASK_CLEAR(KBHISR,C_D)) continue;
			; SOURCE LINE # 193
	MOV  	DPTR,#KBHISR
	MOVX 	A,@DPTR
	JNB  	ACC.3,?C0019
?C0024:
;        		RamcodeCmd = KBHIDIR;
			; SOURCE LINE # 194
	MOV  	DPTR,#KBHIDIR
;   		}
			; SOURCE LINE # 195
	SJMP 	?C0045
?C0022:
; 		else if(RamCodePort==0x66)
			; SOURCE LINE # 196
	MOV  	DPTR,#RamCodePort
	MOVX 	A,@DPTR
	CJNE 	A,#066H,?C0026
; 		{
			; SOURCE LINE # 197
;         	if ( IS_MASK_CLEAR(PM1STS,P_IBF)) continue;
			; SOURCE LINE # 198
	MOV  	DPTR,#PM1STS
	MOVX 	A,@DPTR
	JNB  	ACC.1,?C0019
?C0027:
;         	if ( IS_MASK_CLEAR(PM1STS,P_C_D)) continue;
			; SOURCE LINE # 199
	MOV  	DPTR,#PM1STS
	MOVX 	A,@DPTR
	JNB  	ACC.3,?C0019
?C0028:
;         	RamcodeCmd = PM1DI;
			; SOURCE LINE # 200
	MOV  	DPTR,#PM1DI
?C0044:
; 		}		
			; SOURCE LINE # 201
	SJMP 	?C0045
?C0026:
; 		else if(RamCodePort==0x6C)
			; SOURCE LINE # 202
	MOV  	DPTR,#RamCodePort
	MOVX 	A,@DPTR
	CJNE 	A,#06CH,?C0025
; 		{
			; SOURCE LINE # 203
;         	if ( IS_MASK_CLEAR(PM2STS,P_IBF)) continue;
			; SOURCE LINE # 204
	MOV  	DPTR,#PM2STS
	MOVX 	A,@DPTR
	JNB  	ACC.1,?C0019
?C0031:
;         	if ( IS_MASK_CLEAR(PM2STS,P_C_D)) continue;
			; SOURCE LINE # 205
	MOV  	DPTR,#PM2STS
	MOVX 	A,@DPTR
	JNB  	ACC.3,?C0019
?C0032:
;         	RamcodeCmd = PM2DI;
			; SOURCE LINE # 206
	MOV  	DPTR,#PM2DI
?C0045:
	MOVX 	A,@DPTR
	MOV  	DPTR,#RamcodeCmd
	MOVX 	@DPTR,A
; 		}	
			; SOURCE LINE # 207
?C0025:
; 		
;         if ( RamcodeCmd == 0x55)
			; SOURCE LINE # 209
	MOV  	DPTR,#RamcodeCmd
	MOVX 	A,@DPTR
	CJNE 	A,#055H,?C0033
;      	{
			; SOURCE LINE # 210
;      		WinFlashMark = 0x33;
			; SOURCE LINE # 211
	MOV  	DPTR,#WinFlashMark
	MOV  	A,#033H
	MOVX 	@DPTR,A
;         	break;
			; SOURCE LINE # 212
	SJMP 	?C0020
;   		}
			; SOURCE LINE # 213
?C0033:
; 		else if ( RamcodeCmd == 0xAF)
			; SOURCE LINE # 214
	MOV  	DPTR,#RamcodeCmd
	MOVX 	A,@DPTR
	XRL  	A,#0AFH
	JNZ  	?C0019
;      	{
			; SOURCE LINE # 215
;             HCTRL2R = 0x80;		
			; SOURCE LINE # 216
	MOV  	DPTR,#HCTRL2R
	MOV  	A,#080H
	MOVX 	@DPTR,A
;             CLEAR_MASK(IER7,BIT3);  // Disable HSPI interrupt 
			; SOURCE LINE # 217
	MOV  	DPTR,#IER7
	MOVX 	A,@DPTR
	ANL  	A,#0F7H
	MOVX 	@DPTR,A
;             SET_MASK(ISR7,BIT3);    // W/C interrupt status
			; SOURCE LINE # 218
	MOV  	DPTR,#ISR7
	MOVX 	A,@DPTR
	ORL  	A,#08H
	MOVX 	@DPTR,A
; 	        GPCRH3 = INPUT;         // Set input mode
			; SOURCE LINE # 219
	MOV  	DPTR,#GPCRH3
	MOV  	A,#080H
	MOVX 	@DPTR,A
; 	        GPCRH4 = INPUT;         // Set input mode
			; SOURCE LINE # 220
	MOV  	DPTR,#GPCRH4
	MOVX 	@DPTR,A
; 	        GPCRH5 = INPUT;         // Set input mode
			; SOURCE LINE # 221
	MOV  	DPTR,#GPCRH5
	MOVX 	@DPTR,A
; 	        GPCRH6 = INPUT;         // Set input mode
			; SOURCE LINE # 222
	MOV  	DPTR,#GPCRH6
	MOVX 	@DPTR,A
;             SET_MASK(RSTC4,BIT0);   // Reset SPI
			; SOURCE LINE # 223
	MOV  	DPTR,#RSTC4
	MOVX 	A,@DPTR
	ORL  	A,#01H
	MOVX 	@DPTR,A
;             
; 			WDTRST = 1;			// Reset watch dog timer
			; SOURCE LINE # 225
	SETB 	WDTRST
; 			WDTEB = 1;			// Enable watch dog
			; SOURCE LINE # 226
	SETB 	WDTEB
?C0036:
;        		while(1);			// Wait for watch dog time-out
			; SOURCE LINE # 227
	SJMP 	?C0036
;         }
			; SOURCE LINE # 228
; 	}
			; SOURCE LINE # 229
?C0020:
; 
; 	_nop_();
			; SOURCE LINE # 231
	NOP  	
; 
; 	GPCRH0 = ALT;
			; SOURCE LINE # 233
	CLR  	A
	MOV  	DPTR,#GPCRH0
	MOVX 	@DPTR,A
; 
;     #pragma asm
;     EXTRN CODE (main)
	  EXTRN CODE (main)
;     LJMP    main
	  LJMP    main
;     #pragma endasm
; 
; }
			; SOURCE LINE # 240
	RET  	
; END OF HSPI_CmdRamCode

; 
; //-----------------------------------------------------------------------------
; // Changing PLL frequency function
; //-----------------------------------------------------------------------------
; void ChangePLLFrequency(BYTE newseting)

	RSEG  ?PR?_ChangePLLFrequency?CORE_HSPI
_ChangePLLFrequency:
	USING	0
			; SOURCE LINE # 245
;---- Variable 'newseting?540' assigned to Register 'R7' ----
; {
			; SOURCE LINE # 246
;     if(newseting!=PLLFREQR)
			; SOURCE LINE # 247
	MOV  	DPTR,#PLLFREQR
	MOVX 	A,@DPTR
	XRL  	A,R7
	JZ   	?C0040
;     {
			; SOURCE LINE # 248
;         PLLFREQR = newseting;
			; SOURCE LINE # 249
	MOV  	A,R7
	MOVX 	@DPTR,A
;         PLLCTRL = 1;
			; SOURCE LINE # 250
	MOV  	DPTR,#PLLCTRL
	MOV  	A,#01H
	MOVX 	@DPTR,A
;         DisableAllInterrupt();
			; SOURCE LINE # 251
	LCALL	DisableAllInterrupt
; 	    PCON =2 ;             	// enter sleep mode
			; SOURCE LINE # 252
	MOV  	PCON,#02H
; 	    _nop_();
			; SOURCE LINE # 253
	NOP  	
; 	    _nop_();
			; SOURCE LINE # 254
	NOP  	
; 	    _nop_();
			; SOURCE LINE # 255
	NOP  	
; 	    _nop_();
			; SOURCE LINE # 256
	NOP  	
; 	    _nop_();
			; SOURCE LINE # 257
	NOP  	
; 	    _nop_();
			; SOURCE LINE # 258
	NOP  	
; 	    _nop_();
			; SOURCE LINE # 259
	NOP  	
; 	    _nop_();	
			; SOURCE LINE # 260
	NOP  	
;     }
			; SOURCE LINE # 261
; }
			; SOURCE LINE # 262
?C0040:
	RET  	
; END OF _ChangePLLFrequency

	END
